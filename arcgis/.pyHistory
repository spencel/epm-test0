# Run this in arcmap cli # This script exports feature layers to dbf stripped of all fields   import sys import os import arcpy  webAddress = 'http://10.65.0.212:8840' tempGdbName = r'temp.gdb' defaultGdbFullPath = r'C:\Users\slank\Documents\ArcGIS\Default.gdb' atlasSdeFullPath = r'C:\Users\slank\Documents\projects\epm-test0\arcgis\atlas.sde' getDataFieldName = 'get_data'  exportFeatureclasses = [ 	[ os.path.join( atlasSdeFullPath, r'SDW.CITY.W_PIPE' ),  [], [ 'FAC_SEQ_NUM', '/get-w-pipe/' ]], 	[ os.path.join( defaultGdbFullPath, r'W_EXCAVATION' ), [], [ 'ID', '/get-excavation/' ]] ]  undeletableFieldList = [ 	'OBJECTID', 	'SHAPE', 	'SHAPE_Length', 	getDataFieldName ]  # get mxd mxd = arcpy.mapping.MapDocument( 'CURRENT' ) # get dataframe dataframe = arcpy.mapping.ListDataFrames( mxd, 'Layers' )[0] # get mxd full path mxdFullPath = mxd.filePath # get working directory arcmapDirectoryPath = os.path.dirname( mxdFullPath ) #print( 'arcmapDirectoryPath: ' + arcmapDirectoryPath ) # set temp gdb full path tempGdbFullPath = os.path.join( arcmapDirectoryPath, tempGdbName ) # delete temp gdb if it exists if os.path.isdir( tempGdbFullPath ) == True: 	# delete temp gdb 	print( 'deleting: ' + tempGdbFullPath ) 	arcpy.Delete_management( tempGdbFullPath ) # create temp gdb if it doesn't exist (deletion might have failed) if os.path.isdir( tempGdbFullPath ) == False: 	print( 'creating: ' + ( os.path.join( arcmapDirectoryPath, tempGdbName ))) 	arcpy.CreateFileGDB_management( arcmapDirectoryPath, tempGdbName ) # process feature classes for item in exportFeatureclasses: 	featureclassFullPath = item[ 0 ] 	conservedFieldList = item[ 1 ] 	referenceField = item[ 2 ][ 0 ] 	route = item[ 2 ][ 1 ] 	# export feature class to temp gdb 	print( 'exporting ' + featureclassFullPath ) 	arcpy.FeatureClassToGeodatabase_conversion( featureclassFullPath, tempGdbFullPath ) 	# get feature class name 	arcpy.env.workspace = tempGdbFullPath # required before using ListFeatureClasses() 	featureclassName = arcpy.ListFeatureClasses()[ 0 ] 	# get temp feature class full path 	tempfeatureclassFullPath = os.path.join( tempGdbFullPath, featureclassName ) 	# get its field list 	fieldList = arcpy.ListFields( tempfeatureclassFullPath ) 	# export table data to tab delimited text file 	# set data file full path 	dataFileFullPath = os.path.join( arcmapDirectoryPath, featureclassName + '.data' ) 	with open( dataFileFullPath, 'w' ) as file: # 'w' overwrites anything already in file 		# write field names 		for i, field in enumerate( fieldList ): 			file.write( field.name ) 			if i != ( len( fieldList ) - 1 ): 				file.write( '\t' ) 		file.write( '\n' ) 		# write table data 		# get total rows first 		rowCount = 0 		with arcpy.da.SearchCursor( tempfeatureclassFullPath, '*' ) as cursor: 			for row in cursor: 				rowCount = rowCount + 1 		with arcpy.da.SearchCursor( tempfeatureclassFullPath, '*' ) as cursor: 			for i, row in enumerate( cursor ): 				for j, value in enumerate( row ): 					#print( u'{0}' ).format( value ) 					#print( type( value )) 					if type( value ) == unicode: 						#print( 'converting to unicode' ) 						value = value.encode( 'utf-8' ) 						file.write( value ) 					else: 						file.write( str( value ) ) 					if j != ( len( row ) - 1 ): 						file.write( '\t' ) 				if i != ( rowCount - 1 ): 					file.write( '\n' ) 	 	# add field (for linking to web app) 	print( 'adding field ' + tempfeatureclassFullPath ) 	arcpy.AddField_management( \ 		in_table = tempfeatureclassFullPath, \ 		field_name = getDataFieldName, \ 		field_alias = 'Click', \ 		field_type = 'TEXT', \ 		field_length = 300 ) 	print( 'exporting ' + tempfeatureclassFullPath ) 	# set get data field using field calculator 	# should come up with, e.g.: '<a href="http://10.65.0.212:8840/get-excavation/' + str( !ID! ) + '" >Here</a>' 	link = '\'' + webAddress + route + '\' + str( !' + referenceField + '! )' 	#print( 'link: ' + link ) 	#expression = '\'<a href=\"' + link + '\" >Here</a>\'' 	expression = link 	print( expression ) 	print( 'calculating reference to web app field' ) 	arcpy.CalculateField_management( \ 		in_table = tempfeatureclassFullPath, \ 		field = getDataFieldName, \ 		expression_type = 'PYTHON', \ 		expression = expression ) 	# make list of fields to delete 	fieldDeletionList = [] 	#print( str( fieldDeletionList )) 	for field in fieldList: 		print( 'field.required: ' + str( field.required ) ) 		if ( field.name not in conservedFieldList \ 			and field.name not in undeletableFieldList ) \ 			or field.required == False : 			#print( field.name + ' not in field deletion lists' ) 			fieldDeletionList.append( field.name ) 	# delete fields 	print( 'deleting fields in ' + tempfeatureclassFullPath ) 	arcpy.DeleteField_management( tempfeatureclassFullPath, fieldDeletionList ) 	# deleteField_management adds the feature class to the mxd 	print( 'removing layer: ' + featureclassName ) 	arcpy.env.workspace = '' # ensure workspace is not set to the temp gdb 	for layer in arcpy.mapping.ListLayers( mxd, '', dataframe ): 		arcpy.mapping.RemoveLayer( dataframe, layer ) 	# export temporary feature class to shape file for arcgis online 	arcpy.FeatureClassToShapefile_conversion( tempfeatureclassFullPath, arcmapDirectoryPath ) 	# delete temporary feature class from temp gdb	 	print( 'deleting ' + tempfeatureclassFullPath ) 	arcpy.Delete_management( tempfeatureclassFullPath )   # delete temp gdb print( 'deleting ' + tempGdbFullPath ) arcpy.Delete_management( tempGdbFullPath )
